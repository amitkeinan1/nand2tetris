// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	
	static Array twoToThe;


    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);

		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 32767 + 1;
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x > 0){
			return x;
		}
		else{
		return -x;
		}
    }
	
	/** Returns the i'th bit of x. */
    function int getBit(int x, int i) {
		var int temp;
		let temp = x & twoToThe[i];
		if ((temp > 0) | (temp = (32767 + 1))){
			return 1;
		}
		else{
			return 0;
		}
    }

    /** Returns x*y if x and y are positive.
     */
    function int absMultiply(int x, int y) {
		var int sum, i, shiftedX, remainingY, j;
		let sum = 0;
		let i = 0;
		let shiftedX = x;
		let remainingY = y;
		while (i < 16){
		    if (x = twoToThe[i]){
		        let j = 0;
                let sum = y;
		        while (j < i){
                    let sum = sum + y;
                    let j = j+1;
		        }
		        return sum;
		    }else{
		        if (y = twoToThe[i]){
		        let j = 0;
                let sum = x;
		        while (j < i){
                    let sum = sum + x;
                    let j = j+1;
		        }
		        return sum;
		        }
		    }
		    let i = i+1;
		}
        let i =0;
		while ((i < 16) & (remainingY > 0)){
			if (Math.getBit(y, i) = 1){
				let sum = sum + shiftedX;
				let remainingY = remainingY - twoToThe[i];
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		
		return sum;
    }
	
	 /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
	function int multiply(int x, int y) {
		var int absRes, negsNum;
		let negsNum = 0;
		if (x > 0){
			let negsNum = negsNum + 1;
		}
		if (y > 0){
			let negsNum = negsNum + 1;
		}
		let absRes = Math.absMultiply(Math.abs(x), Math.abs(y));
		if (negsNum = 1){
			return -absRes;
		}
		else{
			return absRes;
		}
    }
	
	 /** Returns x/y if x and y are positive.
     */
    function int absDivide(int x, int y) {
		var int q;
		if (y < 0){     //detect overflow
			return 0;
		}
		if (y > x){
		return 0;
		}
		else{
			let q = x / (y + y);
			if ((x - (2 * q * y)) < y){
				return (q + q);
			}
			else {
				return q + q + 1;
			}
		}
    }
	

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int absRes, negsNum;
		let negsNum = 0;
		if (x > 0){
			let negsNum = negsNum + 1;
		}
		if (y > 0){
			let negsNum = negsNum + 1;
		}
		let absRes = Math.absDivide(Math.abs(x), Math.abs(y));
		if (negsNum = 1){
			return -absRes;
		}
		else{
			return absRes;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, a;
		let y = 0;
		let j = 7;
		
		while (j > -1){
			let a = (y + twoToThe[j]) * (y + twoToThe[j]);
			if ((a > 0) & (~(a > x))){
				let y = y + twoToThe[j];
			}
			else{
			}
			
			let j = j - 1;
		}
		return y;
		
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b){
			return a;
		}
		else{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a > b){
			return b;
		}
		else{
			return a;
		}
    }

    /** ~non-public~ Returns the i-th power of two */
    function int powerOfTwo(int i){
        return twoToThe[i];
    }

}
