<class>
  <keyword> class </keyword>
  <identifier-class-0-definition> Main </identifier-class-0-definition>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier-STATIC-0-definition> test </identifier-STATIC-0-definition>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier-subroutine-0-definition> main </identifier-subroutine-0-definition>
    <symbol> ( </symbol>
    <parameterList/>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier-class-0-usage> SquareGame </identifier-class-0-usage>
        <identifier-VAR-0-definition> game </identifier-VAR-0-definition>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier-VAR-0-usage> game </identifier-VAR-0-usage>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier-class-0-usage> SquareGame </identifier-class-0-usage>
              <symbol> . </symbol>
              <identifier-subroutine-0-usage> new </identifier-subroutine-0-usage>
              <symbol> ( </symbol>
              <expressionList/>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier-VAR-0-usage> game </identifier-VAR-0-usage>
          <symbol> . </symbol>
          <identifier-subroutine-0-usage> run </identifier-subroutine-0-usage>
          <symbol> ( </symbol>
          <expressionList/>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier-VAR-0-usage> game </identifier-VAR-0-usage>
          <symbol> . </symbol>
          <identifier-subroutine-0-usage> dispose </identifier-subroutine-0-usage>
          <symbol> ( </symbol>
          <expressionList/>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier-subroutine-0-definition> more </identifier-subroutine-0-definition>
    <symbol> ( </symbol>
    <parameterList/>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier-VAR-0-definition> i </identifier-VAR-0-definition>
        <symbol> , </symbol>
        <identifier-VAR-1-definition> j </identifier-VAR-1-definition>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier-class-0-usage> String </identifier-class-0-usage>
        <identifier-VAR-2-definition> s </identifier-VAR-2-definition>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier-class-0-usage> Array </identifier-class-0-usage>
        <identifier-VAR-3-definition> a </identifier-VAR-3-definition>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-2-usage> s </identifier-VAR-2-usage>
              <symbol> = </symbol>
              <expression>
                <term>
                  <stringConstant> string constant </stringConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-2-usage> s </identifier-VAR-2-usage>
              <symbol> = </symbol>
              <expression>
                <term>
                  <keyword> null </keyword>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-3-usage> a </identifier-VAR-3-usage>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier-VAR-3-usage> a </identifier-VAR-3-usage>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-0-usage> i </identifier-VAR-0-usage>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier-VAR-0-usage> i </identifier-VAR-0-usage>
                </term>
                <symbol> * </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <identifier-VAR-1-usage> j </identifier-VAR-1-usage>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-1-usage> j </identifier-VAR-1-usage>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier-VAR-1-usage> j </identifier-VAR-1-usage>
                </term>
                <symbol> / </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier-VAR-0-usage> i </identifier-VAR-0-usage>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier-VAR-0-usage> i </identifier-VAR-0-usage>
                </term>
                <symbol> | </symbol>
                <term>
                  <identifier-VAR-1-usage> j </identifier-VAR-1-usage>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
